{"version":3,"file":"file-drop-uploader.directive.js","sourceRoot":"","sources":["file-drop-uploader.directive.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAoD,eAAe,CAAC,CAAA;AACpE,sCAAoC,yBAAyB,CAAC,CAAA;AAO9D;IAME,0BAAmB,EAAc;QANnC,iBA2CC;QArCoB,OAAE,GAAF,EAAE,CAAY;QAFjC,aAAQ,GAAsB,IAAI,mBAAY,EAAE,CAAC;QAG/C,IAAI,CAAC,QAAQ,GAAG,IAAI,2CAAmB,EAAE,CAAC;QAC1C,UAAU,CAAC;YACT,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAC,IAAI;YACpC,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,qCAAU,GAAV;QAAA,iBAsBC;QArBC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAC,CAAC;YAC/C,CAAC,CAAC,eAAe,EAAE,CAAC;YACpB,CAAC,CAAC,cAAc,EAAE,CAAC;YAEnB,IAAI,EAAE,GAAG,CAAC,CAAC,YAAY,CAAC;YACxB,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC;YAErB,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjB,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC;QACH,CAAC,EAAE,KAAK,CAAC,CAAC;QAEV,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,gBAAgB,CAAC,WAAW,EAAE,UAAC,CAAC;YACpD,CAAC,CAAC,eAAe,EAAE,CAAC;YACpB,CAAC,CAAC,cAAc,EAAE,CAAC;QACrB,CAAC,EAAE,KAAK,CAAC,CAAC;QAEV,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAC,CAAC;YACnD,CAAC,CAAC,eAAe,EAAE,CAAC;YACpB,CAAC,CAAC,cAAc,EAAE,CAAC;QACrB,CAAC,EAAE,KAAK,CAAC,CAAC;IACZ,CAAC;IA9CH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;YAC9B,MAAM,EAAE,CAAC,uBAAuB,CAAC;YACjC,OAAO,EAAE,CAAC,UAAU,CAAC;SACtB,CAAC;;wBAAA;IA4CF,uBAAC;AAAD,CAAC,AA3CD,IA2CC;AA3CY,wBAAgB,mBA2C5B,CAAA","sourcesContent":["import { Directive, ElementRef, EventEmitter } from '@angular/core';\nimport { FileUploaderService } from './file-uploader.service';\n\n@Directive({\n  selector: '[FileDropUploader]',\n  inputs: ['options: ng-file-drop'],\n  outputs: ['onUpload']\n})\nexport class FileDropUploader {\n\n  uploader: FileUploaderService;\n  options: any;\n  onUpload: EventEmitter<any> = new EventEmitter();\n\n  constructor(public el: ElementRef) {\n    this.uploader = new FileUploaderService();\n    setTimeout(() => {\n      this.uploader.setOptions(this.options);\n    });\n\n    this.uploader._emitter.subscribe((data) => {\n      this.onUpload.emit(data);\n    });\n\n    this.initEvents();\n  }\n\n  initEvents(): void {\n    this.el.nativeElement.addEventListener('drop', (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n\n      let dt = e.dataTransfer;\n      let files = dt.files;\n\n      if (files.length) {\n        this.uploader.addFilesToQueue(files);\n      }\n    }, false);\n\n    this.el.nativeElement.addEventListener('dragenter', (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n    }, false);\n\n    this.el.nativeElement.addEventListener('dragover', (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n    }, false);\n  }\n\n}\n"]}